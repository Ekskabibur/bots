# -*- coding: utf-8 -*-

import TOBY
from TOBY.lib.curve.ttypes import *
from datetime import datetime
import time, datetime, random, sys, re, os, json, subprocess, codecs, threading, glob

cl = LINETCR.LINE()
cl.login(token='EpXh1wkibr9Xml9UK2o0.8Yc3rgzqX99L+IbVrXPqea.UXjhPDC5MomOIx/Xn1tDi5I64pnF3Ui3M90DlZwsvjg=')
cl.loginResult()

ki = LINETCR.LINE()
ki.login(token="EpctQ6l4KX4Fhf2oLOod.0tBeEHF8cv5j2CG0bFfhpq.N+NAAOOLl4H+slgPklTi2JTfnx4eJnFLdoAKZPZBT6U=")
ki.loginResult()

ki2 = LINETCR.LINE()
ki2.login(token="Ep6NNTGlhJML94NSV2H0.gq2r1Jzxj71z3rFp84YFya.banHXK+dOG3VaR7+wvbTZvwVFwn7hhL5ozSlJ4nGaf4=")
ki2.loginResult()

ki3 = LINETCR.LINE()
ki3.login(token="EpRCvzQfbvp024Oi2GHf.swrVmOx1u4N61IdToJootW.fR0tvm/Hzqz1cMacWh3yCZOyc2H1CPZGyFk5lErLcHU=")
ki3.loginResult()

ki4 = LINETCR.LINE()
ki4.login(token="EpohfIwYdNohRlPwMnf9.beygTSQHv5ToHeFKhyMn2q.LgTScKMOxgCpbhiO21kCfRaVuWQGMHZE72UlCfFFnTo=")
ki4.loginResult()

ki5 = LINETCR.LINE()
ki5.login(token="EpL6yxq4Af1RmK3nH3Fc.3VJlu0KS/DixvbhuJSvGta.qhuupo+a3VIxKlbpa2IiiTeuA/vxCrwZUvXRZwUfb3c=")
ki5.loginResult()

reload(sys)
sys.setdefaultencoding('utf-8')

helpMessage = """==========
☫[My help]
☫[Mybot]
☫[Me]
☫[Kb-Kb18「Contact Bot」]
☫[Gift-Gift3]
☫[Contact]
☫[Mid]
☫[All mid]
☫[TL:「Text」
☫[Mybio:「Text」]
☫[MyName:「Text」]
☫[Mid:「mid」]
☫[Contact 「On/Off」]
☫[Auto Join 「On/Off」]
☫[Add 「On/Off」]
☫[Share 「On/Off」]
☫[Jam 「On/Off」]
☫[Leave 「On/Off」]
☫[Group Cancel:]
☫[Jam Say:「Nama」]
☫[Update]
☫[Groups]
☫[Mcheck]
☫[Pesan Cek]
☫[Blocklist]
☫[Creator]
☫[Pesan set:「Text」]

[C̶̲̅ᴏ̶̲̅ᴍ̶̲̅ᴍ̶̲̅ᴀ̶̲̅ɴ̶̲̅ᴅ̶̲̅ ̶̲̅ɪ̶̲̅ɴ̶̲̅ ̶̲̅G̶̲̅ʀ̶̲̅ᴏ̶̲̅ᴜ̶̲̅ᴘ̶̲̅]

☫[Kick:「mid」]
☫[Invite:「mid」]
☫[Cancel]
☫[Ourl]
☫[Banlist]
☫[Curl]
☫[Invite:gcreator]
☫[Protect 「On/Off」]
☫[Qr 「On/Off」]
☫[Cancel 「On/Off」]
☫[Invite 「On/Off」]
☫[Ginfo]
☫[Backup]
☫[Sayang]
☫[Gn 「Nama Grup」]
☫[Album:「ID」]
☫[Gurl 「ID」]
☫[Nk「nama」]
☫[Ban]
☫[Unban]
☫[Ban:]
☫[Unban:]  

=====[K̶̷̲̅I̶̷̲̅T̶̷̲̅ ̶̷̲̅S̶̷̲̅U̶̷̲̅N̶̷̲̅E̶̷̲̅]=====
"""
KAC = [cl, ki, ki2, ki3, ki4, ki5]
mid = cl.getProfile().mid
kimid = ki.getProfile().mid
ki2mid = ki2.getProfile().mid
ki3mid = ki3.getProfile().mid
ki4mid = ki4.getProfile().mid
ki5mid = ki5.getProfile().mid
Bots = [mid, kimid, ki2mid, ki3mid, ki4mid, ki5mid]
admsa = "MID"

wait = {
    'contact': False,
    'autoJoin': True,
    'autoCancel': {"on": True, "members": 3},
    'leaveRoom': True,
    'timeline': False,
    'autoAdd': False,
    'message': "тнαикѕ fσя α∂∂ιиg мє αѕ α fяιєиd",
    "lang": "JP",
    "comment": "Thanks For Add Me",
    "commentOn": False,
    "commentBlack": {},
    "wblack": False,
    "dblack": False,
    "clock": True,
    "cName": "",
    "blacklist": {},
    "wblacklist": False,
    "dblacklist": False,
    "protect": True,
    "cancelprotect": False,
    "inviteprotect": False,
    "linkprotect": False,
}


def cms(string, commands):  # /XXX, >XXX, ;XXX, ^XXX, %XXX, $XXX...
    tex = ["+", "@", "/", ">", ";", "^", "%", "$", "＾", "サテラ:", "サテラ:", "サテラ：", "サテラ："]
    for texX in tex:
        for command in commands:
            if string == command:
                return True
    return False


def bot(op):
    try:
        if op.type == 0:
            return
        if op.type == 13:
            if mid in op.param3:
                G = cl.getGroup(op.param1)
                if wait["autoJoin"] == True:
                    if wait["autoCancel"]["on"] == True:
                        if len(G.members) <= wait["autoCancel"]["members"]:
                            cl.rejectGroupInvitation(op.param1)
                        else:
                            cl.acceptGroupInvitation(op.param1)
                    else:
                        cl.acceptGroupInvitation(op.param1)
                elif wait["autoCancel"]["on"] == True:
                    if len(G.members) <= wait["autoCancel"]["members"]:
                        cl.rejectGroupInvitation(op.param1)
            else:
                Inviter = op.param3.replace("", ',')
                InviterX = Inviter.split(",")
                matched_list = []
                for tag in wait["blacklist"]:
                    matched_list += filter(lambda str: str == tag, InviterX)
                if matched_list == []:
                    pass
                else:
                    cl.cancelGroupInvitation(op.param1, matched_list)
        if op.type == 19:
            if mid in op.param3:
                wait["blacklist"][op.param2] = True
        if op.type == 22:
            if wait["leaveRoom"] == True:
                cl.leaveRoom(op.param1)
        if op.type == 24:
            if wait["leaveRoom"] == True:
                cl.leaveRoom(op.param1)
        if op.type == 26:
            msg = op.message
            if msg.toType == 0:
                msg.to = msg.from_
                if msg.from_ == "MID":
                    if "join:" in msg.text:
                        list_ = msg.text.split(":")
                        try:
                            cl.acceptGroupInvitationByTicket(list_[1], list_[2])
                            G = cl.getGroup(list_[1])
                            G.preventJoinByTicket = True
                            cl.updateGroup(G)
                        except:
                            cl.sendText(msg.to, "error")
            if msg.toType == 1:
                if wait["leaveRoom"] == True:
                    cl.leaveRoom(msg.to)
        if op.type == 25:
            msg = op.message
            if msg.contentType == 13:
                if wait["wblack"] == True:
                    if msg.contentMetadata["mid"] in wait["commentBlack"]:
                        cl.sendText(msg.to, "sudah masuk daftar hitam")
                        wait["wblack"] = False
                    else:
                        wait["commentBlack"][msg.contentMetadata["mid"]] = True
                        wait["wblack"] = False
                        cl.sendText(msg.to, "Itu tidak berkomentar")
                elif wait["dblack"] == True:
                    if msg.contentMetadata["mid"] in wait["commentBlack"]:
                        del wait["commentBlack"][msg.contentMetadata["mid"]]
                        cl.sendText(msg.to, "Done")
                        wait["dblack"] = False
                    else:
                        wait["dblack"] = False
                        cl.sendText(msg.to, "Tidak ada dalam daftar hitam")
                elif wait["wblacklist"] == True:
                    if msg.contentMetadata["mid"] in wait["blacklist"]:
                        cl.sendText(msg.to, "sudah masuk daftar hitam")
                        wait["wblacklist"] = False
                    else:
                        wait["blacklist"][msg.contentMetadata["mid"]] = True
                        wait["wblacklist"] = False
                        cl.sendText(msg.to, "Done")
                elif wait["dblacklist"] == True:
                    if msg.contentMetadata["mid"] in wait["blacklist"]:
                        del wait["blacklist"][msg.contentMetadata["mid"]]
                        cl.sendText(msg.to, "Done")
                        wait["dblacklist"] = False
                    else:
                        wait["dblacklist"] = False
                        cl.sendText(msg.to, "Done")
                elif wait["contact"] == True:
                    msg.contentType = 0
                    cl.sendText(msg.to, msg.contentMetadata["mid"])
                    if 'displayName' in msg.contentMetadata:
                        contact = cl.getContact(msg.contentMetadata["mid"])
                        try:
                            cu = cl.channel.getCover(msg.contentMetadata["mid"])
                        except:
                            cu = ""
                        cl.sendText(msg.to, "[displayName]:\n" + msg.contentMetadata["displayName"] + "\n[mid]:\n" +
                                    msg.contentMetadata[
                                        "mid"] + "\n[statusMessage]:\n" + contact.statusMessage + "\n[pictureStatus]:\nhttp://dl.profile.line-cdn.net/" + contact.pictureStatus + "\n[coverURL]:\n" + str(
                            cu))
                    else:
                        contact = cl.getContact(msg.contentMetadata["mid"])
                        try:
                            cu = cl.channel.getCover(msg.contentMetadata["mid"])
                        except:
                            cu = ""
                        cl.sendText(msg.to,
                                    "[displayName]:\n" + contact.displayName + "\n[mid]:\n" + msg.contentMetadata[
                                        "mid"] + "\n[statusMessage]:\n" + contact.statusMessage + "\n[pictureStatus]:\nhttp://dl.profile.line-cdn.net/" + contact.pictureStatus + "\n[coverURL]:\n" + str(
                                        cu))
            elif msg.contentType == 16:
                if wait["timeline"] == True:
                    msg.contentType = 0
                    if wait["lang"] == "JP":
                        msg.text = "menempatkan URL\n" + msg.contentMetadata["postEndUrl"]
                    else:
                        msg.text = "URL\n" + msg.contentMetadata["postEndUrl"]
                    cl.sendText(msg.to, msg.text)
            elif msg.text is None:
                return
            elif msg.text.lower() == 'my help':
                if wait["lang"] == "JP":
                    cl.sendText(msg.to, helpMessage)
                else:
                    cl.sendText(msg.to, helpMessage)
            elif 'gn ' in msg.text.lower():
                if msg.toType == 2:
                    aditya = cl.getGroup(msg.to)
                    aditya.name = msg.text.replace("Gn ", "")
                    cl.updateGroup(aditya)

            elif msg.text.lower() == 'kb':
                msg.contentType = 13
                msg.contentMetadata = {'mid': kimid}
                ki.sendMessage(msg)
            elif msg.text.lower() == 'kb2':
                msg.contentType = 13
                msg.contentMetadata = {'mid': ki2mid}
                ki2.sendMessage(msg)
            elif msg.text.lower() == 'kb3':
                msg.contentType = 13
                msg.contentMetadata = {'mid': ki3mid}
                ki3.sendMessage(msg)
            elif msg.text.lower() == 'kb4':
                msg.contentType = 13
                msg.contentMetadata = {'mid': ki4mid}
                ki4.sendMessage(msg)
            elif msg.text.lower() == 'kb5':
                msg.contentType = 13
                msg.contentMetadata = {'mid': ki5mid}
                ki5.sendMessage(msg)

            elif msg.text.lower() == 'cancel':
                if msg.toType == 2:
                    group = cl.getGroup(msg.to)
                    if group.invitee is not None:
                        gInviMids = [contact.mid for contact in group.invitee]
                        cl.cancelGroupInvitation(msg.to, gInviMids)
                    else:
                        if wait["lang"] == "JP":
                            cl.sendText(msg.to, "Tidak ada undangan")
                        else:
                            cl.sendText(msg.to, "Invitan tidak ada")
                else:
                    if wait["lang"] == "JP":
                        cl.sendText(msg.to, "Tidak ada undangan")
                    else:
                        cl.sendText(msg.to, "Invitan tidak ada")
            elif msg.text.lower() == 'ourl':
                if msg.toType == 2:
                    group = cl.getGroup(msg.to)
                    group.preventJoinByTicket = False
                    cl.updateGroup(group)
                    if wait["lang"] == "JP":
                        cl.sendText(msg.to, "URL open")
                    else:
                        cl.sendText(msg.to, "URL open")
                else:
                    if wait["lang"] == "JP":
                        cl.sendText(msg.to, "It can not be used outside the group")
                    else:
                        cl.sendText(msg.to, "Can not be used for groups other than")

            elif msg.text.lower() == 'ginfo':
                ginfo = cl.getGroup(msg.to)
                try:
                    gCreator = ginfo.creator.displayName
                except:
                    gCreator = "Error"
                if wait["lang"] == "JP":
                    if ginfo.invitee is None:
                        sinvitee = "0"
                    else:
                        sinvitee = str(len(ginfo.invitee))
                msg.contentType = 13
                msg.contentMetadata = {'mid': ginfo.creator.mid}
                cl.sendText(msg.to, "[Nama]\n" + str(
                    ginfo.name) + "\n[Group Id]\n" + msg.to + "\n\n[Group Creator]\n" + gCreator + "\n\nAnggota:" + str(
                    len(ginfo.members)) + "\nInvitation:" + sinvitee + "")
                cl.sendMessage(msg)
            elif msg.text.lower() == 'contact':
                msg.contentType = 13
                msg.contentMetadata = {'mid': msg.to}
                cl.sendMessage(msg)
            elif msg.text.lower() == 'mid':
                cl.sendText(msg.to, mid)
            elif msg.text.lower() == 'kb mid':
                ki.sendText(msg.to, kimid)
            elif msg.text.lower() == 'kb2 mid':
                ki2.sendText(msg.to, ki2mid)
            elif msg.text.lower() == 'kb3 mid':
                ki3.sendText(msg.to, ki3mid)
            elif msg.text.lower() == 'kb4 mid':
                ki4.sendText(msg.to, ki4mid)
            elif msg.text.lower() == 'kb5 mid':
                ki5.sendText(msg.to, ki5mid)
            elif "all mid" == msg.text:
                ki.sendText(msg.to, kimid)
                ki2.sendText(msg.to, ki2mid)
                ki3.sendText(msg.to, ki3mid)
                ki4.sendText(msg.to, ki4mid)
                ki5.sendText(msg.to, ki5mid)

            elif "Cstatus:" in msg.text:
                if msg.from_ in admin:
                    string = msg.text.replace("Cstatus:", "")
                    if len(string.decode('utf-8')) <= 500:
                        profile = cl.getProfile()
                        profile.statusMessage = string
                        cl.updateProfile(profile)
                    else:
                        cl.sendText(msg.to, "Done")

            elif "Mid:" in msg.text:
                mmid = msg.text.replace("Mid:", "")
                msg.contentType = 13
                msg.contentMetadata = {"mid": mmid}
                cl.sendMessage(msg)

            elif msg.text.lower() == 'contact on':
                if wait["contact"] == True:
                    if wait["lang"] == "JP":
                        cl.sendText(msg.to, "contact set to on")
                    else:
                        cl.sendText(msg.to, "contact already on")
                else:
                    wait["contact"] = True
                    if wait["lang"] == "JP":
                        cl.sendText(msg.to, "contact set to on")
                    else:
                        cl.sendText(msg.to, "contact already on")
            elif msg.text.lower() == 'contact off':
                if wait["contact"] == False:
                    if wait["lang"] == "JP":
                        cl.sendText(msg.to, "contact set to off")
                    else:
                        cl.sendText(msg.to, "contact already off")
                else:
                    wait["contact"] = False
                    if wait["lang"] == "JP":
                        cl.sendText(msg.to, "contact set to off")
                    else:
                        cl.sendText(msg.to, "contact already off")

            elif msg.text.lower() == 'auto join on':
                if wait["autoJoin"] == True:
                    if wait["lang"] == "JP":
                        cl.sendText(msg.to, "Autojoin set to on")
                    else:
                        cl.sendText(msg.to, "Autojoin already on")
                else:
                    wait["autoJoin"] = True
                    if wait["lang"] == "JP":
                        cl.sendText(msg.to, "Autojoin set to on")
                    else:
                        cl.sendText(msg.to, "Autojoin already on")

            elif msg.text.lower() == 'auto join off':
                if wait["autoJoin"] == False:
                    if wait["lang"] == "JP":
                        cl.sendText(msg.to, "Autojoin set to off")
                    else:
                        cl.sendText(msg.to, "Autojoin already off")
                else:
                    wait["autoJoin"] = False
                    if wait["lang"] == "JP":
                        cl.sendText(msg.to, "Autojoin set to off")
                    else:
                        cl.sendText(msg.to, "Autojoin already off")

            elif msg.text.lower() == 'leave on':
                if wait["leaveRoom"] == True:
                    if wait["lang"] == "JP":
                        cl.sendText(msg.to, "Auto Leave room set to on")
                    else:
                        cl.sendText(msg.to, "Auto Leave room already on")
                else:
                    wait["leaveRoom"] = True
                    if wait["lang"] == "JP":
                        cl.sendText(msg.to, "Auto Leave room set to on")
                    else:
                        cl.sendText(msg.to, "Auto Leave room already on")
            elif msg.text.lower() == 'leave off':
                if wait["leaveRoom"] == False:
                    if wait["lang"] == "JP":
                        cl.sendText(msg.to, "Auto Leave room set to off")
                    else:
                        cl.sendText(msg.to, "Auto Leave room already off")
                else:
                    wait["leaveRoom"] = False
                    if wait["lang"] == "JP":
                        cl.sendText(msg.to, "Auto Leave room set to off")
                    else:
                        cl.sendText(msg.to, "Auto Leave room already off")

            elif cms(msg.text, ["creator", "Creator"]):
                msg.contentType = 13
                msg.contentMetadata = {'mid': admsa}
                cl.sendMessage(msg)

            elif msg.text.lower() == 'group id':
                gid = cl.getGroupIdsJoined()
                h = ""
                for i in gid:
                    h += "[%s]:%s\n" % (cl.getGroup(i).name, i)
                cl.sendText(msg.to, h)
            elif msg.text.lower() == 'kb out':
                gid = cl.getGroupIdsJoined()
                gid = ki.getGroupIdsJoined()
                gid = ki2.getGroupIdsJoined()
                gid = ki3.getGroupIdsJoined()
                gid = ki4.getGroupIdsJoined()
                gid = ki5.getGroupIdsJoined()
                for i in gid:
                    ki.leaveGroup(i)
                    ki2.leaveGroup(i)
                    ki3.leaveGroup(i)
                    ki4.leaveGroup(i)
                    ki5.leaveGroup(i)
                if wait["lang"] == "JP":
                    cl.sendText(msg.to, "Bot Sudah Keluar Di semua grup")
                else:
                    cl.sendText(msg.to, "He declined all invitations")

            elif msg.text.lower() == 'url':
                if msg.toType == 2:
                    g = cl.getGroup(msg.to)
                    if g.preventJoinByTicket == True:
                        g.preventJoinByTicket = False
                        cl.updateGroup(g)
                    gurl = cl.reissueGroupTicket(msg.to)
                    cl.sendText(msg.to, "line://ti/g/" + gurl)
                else:
                    if wait["lang"] == "JP":
                        cl.sendText(msg.to, "Hal ini tidak dapat digunakan di luar kelompok")
                    else:
                        cl.sendText(msg.to, "Tidak dapat digunakan untuk kelompok selain")
            elif msg.text.lower() == 'url1':
                if msg.toType == 2:
                    g = cl.getGroup(msg.to)
                    if g.preventJoinByTicket == True:
                        g.preventJoinByTicket = False
                        ki.updateGroup(g)
                    gurl = ki.reissueGroupTicket(msg.to)
                    ki.sendText(msg.to, "line://ti/g/" + gurl)
                else:
                    if wait["lang"] == "JP":
                        ki.sendText(msg.to, "Hal ini tidak dapat digunakan di luar kelompok")
                    else:
                        ki.sendText(msg.to, "Tidak dapat digunakan untuk kelompok selain")
            elif 'gurl ' in msg.text.lower():
                if msg.toType == 2:
                    gid = msg.text.replace("Gurl ", "")
                    gurl = cl.reissueGroupTicket(gid)
                    cl.sendText(msg.to, "line://ti/g/" + gurl)
                else:
                    cl.sendText(msg.to, "Tidak dapat digunakan untuk kelompok selain")
            elif msg.text in ["Com Bl"]:
                wait["wblack"] = True
                cl.sendText(msg.to, "Please send contacts from the person you want to add to the blacklistô€œô€…”")
            elif msg.text in ["Com hapus Bl"]:
                wait["dblack"] = True
                cl.sendText(msg.to, "Please send contacts from the person you want to add from the blacklistô€œô€…”")
            elif msg.text in ["Com Bl cek"]:
                if wait["commentBlack"] == {}:
                    cl.sendText(msg.to, "Nothing in the blacklistô€œ🛡")
                else:
                    cl.sendText(msg.to, "The following is a blacklistô€œ")
                    mc = ""
                    for mi_d in wait["commentBlack"]:
                        mc += "ãƒ»" + cl.getContact(mi_d).displayName + "\n"
                    cl.sendText(msg.to, mc)
            elif msg.text.lower() == 'jam on':
                if wait["clock"] == True:
                    cl.sendText(msg.to, "Jam already on")
                else:
                    wait["clock"] = True
                    now2 = datetime.now()
                    nowT = datetime.strftime(now2, "༺%H:%M༻")
                    profile = cl.getProfile()
                    profile.displayName = wait["cName"] + nowT
                    cl.updateProfile(profile)
                    cl.sendText(msg.to, "Jam set on")
            elif msg.text.lower() == 'jam off':
                if wait["clock"] == False:
                    cl.sendText(msg.to, "Jam already off")
                else:
                    wait["clock"] = False
                    cl.sendText(msg.to, "Jam set off")
            elif "Jam say:" in msg.text:
                n = msg.text.replace("Jam say:", "")
                if len(n.decode("utf-8")) > 30:
                    cl.sendText(msg.to, "terlalu lama")
                else:
                    wait["cName"] = n
                    cl.sendText(msg.to, "Nama Jam Berubah menjadi:" + n)
            elif msg.text.lower() == 'update':
                if wait["clock"] == True:
                    now2 = datetime.now()
                    nowT = datetime.strftime(now2, "༺%H:%M༻")
                    profile = cl.getProfile()
                    profile.displayName = wait["cName"] + nowT
                    cl.updateProfile(profile)
                    cl.sendText(msg.to, "Diperbarui")
                else:
                    cl.sendText(msg.to, "Silahkan Aktifkan Jam")

            elif "Nk " in msg.text:
                nk0 = msg.text.replace("Nk ", "")
                nk1 = nk0.lstrip()
                nk2 = nk1.replace("@", "")
                nk3 = nk2.rstrip()
                _name = nk3
                gs = cl.getGroup(msg.to)
                ginfo = cl.getGroup(msg.to)
                gs.preventJoinByTicket = False
                cl.updateGroup(gs)
                invsend = 0
                Ticket = cl.reissueGroupTicket(msg.to)
                ki18.acceptGroupInvitationByTicket(msg.to, Ticket)
                time.sleep(0.01)
                targets = []
                for s in gs.members:
                    if _name in s.displayName:
                        targets.append(s.mid)
                if targets == []:
                    sendMessage(msg.to, "user does not exist")
                    pass
                else:
                    for target in targets:
                        try:
                            ki18.kickoutFromGroup(msg.to, [target])
                            print (msg.to, [g.mid])
                        except:
                            ki18.leaveGroup(msg.to)
                            gs = cl.getGroup(msg.to)
                            gs.preventJoinByTicket = True
                            cl.updateGroup(gs)
                            gs.preventJoinByTicket(gs)
                            cl.updateGroup(gs)

                            # -----------------------------------------------------------
            elif "#leave" in msg.text:
                try:
                    import sys
                    sys.exit()
                except:
                    pass
                    # -----------------------------------------------------------

                    # -----------------------------------------------------------
            elif msg.text.lower() == 'responsename':
                profile = ki.getProfile()
                text = profile.displayName + ""
                ki.sendText(msg.to, text)
                profile = ki2.getProfile()
                text = profile.displayName + ""
                ki2.sendText(msg.to, text)
                profile = ki3.getProfile()
                text = profile.displayName + ""
                ki3.sendText(msg.to, text)
                profile = ki4.getProfile()
                text = profile.displayName + ""
                ki4.sendText(msg.to, text)
                profile = ki5.getProfile()
                text = profile.displayName + ""
                ki5.sendText(msg.to, text)
                profile = ki6.getProfile()
                text = profile.displayName + ""

            elif cms(msg.text, ["Lurking", "lurking"]):
                if msg.to in wait['readPoint']:
                    if wait["ROM"][msg.to].items() == []:
                        chiya = ""
                    else:
                        chiya = ""
                        for rom in wait["ROM"][msg.to].items():
                            print rom
                            chiya += rom[1] + "\n"

                    cl.sendText(msg.to, "========HAI KANG NYIMAK========%s\n\nKamu tercyduk muehehehe👻👻👻👻\n[%s]" % (
                    wait['readMember'][msg.to], setTime[msg.to]))
                    print "ReadPoint Set..."
                    try:
                        del wait['readPoint'][msg.to]
                        del wait['readMember'][msg.to]
                    except:
                        pass
                    wait['readPoint'][msg.to] = msg.id
                    wait['readMember'][msg.to] = ""
                    wait['setTime'][msg.to] = datetime.datetime.today().strftime('%Y-%m-%d %H:%M:%S')
                    wait['ROM'][msg.to] = {}
                    print wait
                    cl.sendText(msg.to, "Kami telah memperbarui poin baca secara otomatis.")
                else:
                    cl.sendText(msg.to, "Kami telah memperbarui poin baca secara otomatis.")
                    print "ReadPoint Set..."
                    try:
                        del wait['readPoint'][msg.to]
                        del wait['readMember'][msg.to]
                    except:
                        pass
                    wait['readPoint'][msg.to] = msg.id
                    wait['readMember'][msg.to] = ""
                    wait['setTime'][msg.to] = datetime.datetime.today().strftime('%Y-%m-%d %H:%M:%S')
                    wait['ROM'][msg.to] = {}
                    print wait
                    cl.sendText(msg.to, "Kami telah memperbarui poin baca secara otomatis.")
                    # -----------------------------------------------

                    # -----------------------------------------------
            elif msg.text.lower() == 'Masuk':
                G = cl.getGroup(msg.to)
                ginfo = cl.getGroup(msg.to)
                G.preventJoinByTicket = False
                cl.updateGroup(G)
                invsend = 0
                Ticket = cl.reissueGroupTicket(msg.to)
                ki.acceptGroupInvitationByTicket(msg.to, Ticket)
                time.sleep(0.01)
                ki2.acceptGroupInvitationByTicket(msg.to, Ticket)
                time.sleep(0.01)
                ki3.acceptGroupInvitationByTicket(msg.to, Ticket)
                time.sleep(0.01)
                ki4.acceptGroupInvitationByTicket(msg.to, Ticket)
                time.sleep(0.01)
                ki5.acceptGroupInvitationByTicket(msg.to, Ticket)
                time.sleep(0.01)
                G = cl.getGroup(msg.to)
                ginfo = cl.getGroup(msg.to)
                G.preventJoinByTicket = True
                random.choice(KAC).updateGroup(G)
                print "kicker ok"
                G.preventJoinByTicket(G)
                random.choice(KAC).updateGroup(G)
            # -----------------------------------------------
            elif msg.text.lower() == 'backup':
                G = cl.getGroup(msg.to)
                ginfo = cl.getGroup(msg.to)
                G.preventJoinByTicket = False
                cl.updateGroup(G)
                invsend = 0
                Ticket = cl.reissueGroupTicket(msg.to)
                ki.acceptGroupInvitationByTicket(msg.to, Ticket)
                ki2.acceptGroupInvitationByTicket(msg.to, Ticket)
                ki3.acceptGroupInvitationByTicket(msg.to, Ticket)
                G = cl.getGroup(msg.to)
                ginfo = cl.getGroup(msg.to)
                G.preventJoinByTicket = True
                ki.updateGroup(G)
                print "kicker ok"
                G.preventJoinByTicket(G)
                ki.updateGroup(G)
            # -----------------------------------------------
            elif "Bot1 in" in msg.text:
                G = cl.getGroup(msg.to)
                ginfo = cl.getGroup(msg.to)
                G.preventJoinByTicket = False
                cl.updateGroup(G)
                invsend = 0
                Ticket = cl.reissueGroupTicket(msg.to)
                ki.acceptGroupInvitationByTicket(msg.to, Ticket)
                G = cl.getGroup(msg.to)
                ginfo = cl.getGroup(msg.to)
                G.preventJoinByTicket = True
                ki.updateGroup(G)
                print "kicker ok"
                G.preventJoinByTicket(G)
                ki.updateGroup(G)
            # -----------------------------------------------
            elif "Bot2 in" in msg.text:
                G = cl.getGroup(msg.to)
                ginfo = cl.getGroup(msg.to)
                G.preventJoinByTicket = False
                cl.updateGroup(G)
                invsend = 0
                Ticket = cl.reissueGroupTicket(msg.to)
                ki2.acceptGroupInvitationByTicket(msg.to, Ticket)
                G = cl.getGroup(msg.to)
                ginfo = cl.getGroup(msg.to)
                G.preventJoinByTicket = True
                ki2.updateGroup(G)
                print "kicker ok"
                G.preventJoinByTicket(G)
                ki2.updateGroup(G)
            # -----------------------------------------------
            elif "Bot3 in" in msg.text:
                G = cl.getGroup(msg.to)
                ginfo = cl.getGroup(msg.to)
                G.preventJoinByTicket = False
                cl.updateGroup(G)
                invsend = 0
                Ticket = cl.reissueGroupTicket(msg.to)
                ki3.acceptGroupInvitationByTicket(msg.to, Ticket)
                G = cl.getGroup(msg.to)
                ginfo = cl.getGroup(msg.to)
                G.preventJoinByTicket = True
                ki2.updateGroup(G)
                print "kicker ok"
                G.preventJoinByTicket(G)
                ki2.updateGroup(G)
            # -----------------------------------------------
            elif "Bot4 in" in msg.text:
                G = cl.getGroup(msg.to)
                ginfo = cl.getGroup(msg.to)
                G.preventJoinByTicket = False
                cl.updateGroup(G)
                invsend = 0
                Ticket = cl.reissueGroupTicket(msg.to)
                ki4.acceptGroupInvitationByTicket(msg.to, Ticket)
                G = cl.getGroup(msg.to)
                ginfo = cl.getGroup(msg.to)
                G.preventJoinByTicket = True
                ki3.updateGroup(G)
                print "kicker ok"
                G.preventJoinByTicket(G)
                ki3.updateGroup(G)
            # -----------------------------------------------
            elif "Bot5 in" in msg.text:
                G = cl.getGroup(msg.to)
                ginfo = cl.getGroup(msg.to)
                G.preventJoinByTicket = False
                cl.updateGroup(G)
                invsend = 0
                Ticket = cl.reissueGroupTicket(msg.to)
                ki5.acceptGroupInvitationByTicket(msg.to, Ticket)
                G = cl.getGroup(msg.to)
                ginfo = cl.getGroup(msg.to)
                G.preventJoinByTicket = True
                ki5.updateGroup(G)
                print "kicker ok"
                G.preventJoinByTicket(G)
                ki5.updateGroup(G)
            # -----------------------------------------------
            elif msg.text.lower() == 'Pulang':
                if msg.toType == 2:
                    ginfo = cl.getGroup(msg.to)
                    try:
                        cl.sendText(msg.to, "􀠁􀆩􏿿Bye Bye " + str(ginfo.name) + "")
                        ki.leaveGroup(msg.to)
                        ki2.leaveGroup(msg.to)
                        ki3.leaveGroup(msg.to)
                        ki4.leaveGroup(msg.to)
                        ki5.leaveGroup(msg.to)
                    except:
                        pass
                        # -----------------------------------------------
            elif "Bot1 bye" in msg.text:
                if msg.toType == 2:
                    ginfo = cl.getGroup(msg.to)
                    try:
                        ki.leaveGroup(msg.to)
                    except:
                        pass
                        # -----------------------------------------------
            elif "Bot2 bye" in msg.text:
                if msg.toType == 2:
                    ginfo = cl.getGroup(msg.to)
                    try:
                        ki2.leaveGroup(msg.to)
                    except:
                        pass
                        # -----------------------------------------------
            elif "Bot3 bye" in msg.text:
                if msg.toType == 2:
                    ginfo = cl.getGroup(msg.to)
                    try:
                        ki3.leaveGroup(msg.to)
                    except:
                        pass
                        # -----------------------------------------------
            elif "Bot4 bye" in msg.text:
                if msg.toType == 2:
                    ginfo = cl.getGroup(msg.to)
                    try:
                        ki4.leaveGroup(msg.to)
                    except:
                        pass
                        # -----------------------------------------------
            elif "Bot5 bye" in msg.text:
                if msg.toType == 2:
                    ginfo = cl.getGroup(msg.to)
                    try:
                        ki5.leaveGroup(msg.to)
                    except:
                        pass
                        # -----------------------------------------------
            elif "Bot Key" in msg.text:
                ki.sendText(msg.to, """      􀠁􀆩􏿿􀠁􀆩􏿿 CYBER BOT CRIME [=] 􀠁􀆩􏿿􀠁􀆩􏿿  \n\n 􀠁􀆩􏿿 key Only Kicker 􀠁􀆩􏿿 \n\n􀠁􀆩􏿿[Kb1 in]\n􀠁􀆩􏿿[1name:]\n􀠁􀆩􏿿[B Cancel]\n􀠁􀆩􏿿[kick @]\n􀠁􀆩􏿿[Ban @]\n􀠁􀆩􏿿[kill]\n􀠁􀆩􏿿[BotChat]\n􀠁􀆩􏿿[Respons]\n􀠁􀆩􏿿[Kb1 Gift]\n􀠁􀆩􏿿[Kb1 bye]\n\n   
""")
            # -----------------------------------------------
            elif msg.text.lower() == 'welcome':
                ginfo = cl.getGroup(msg.to)
                cl.sendText(msg.to, "Selamat Datang Di Grup " + str(ginfo.name))
                cl.sendText(msg.to, "Owner Grup " + str(ginfo.name) + " :\n" + ginfo.creator.displayName)
            elif "Hi " in msg.text:
                bctxt = msg.text.replace("Hi ", "")
                ki19.sendText(msg.to, (bctxt))
            elif "Say " in msg.text:
                bctxt = msg.text.replace("Bot Say ", "")
                ki.sendText(msg.to, (bctxt))
                ki2.sendText(msg.to, (bctxt))
                ki3.sendText(msg.to, (bctxt))
                ki4.sendText(msg.to, (bctxt))
                ki5.sendText(msg.to, (bctxt))
            elif msg.text.lower() == 'ping':
                ki.sendText(msg.to, "Ping 􀠁􀆩􏿿")
                ki2.sendText(msg.to, "Ping 􀠁􀆩􏿿")
                ki3.sendText(msg.to, "Ping 􀠁􀆩􏿿")
                ki4.sendText(msg.to, "Ping 􀠁􀆩􏿿")
                ki5.sendText(msg.to, "Ping 􀠁􀆩􏿿")
                # -----------------------------------------------
                # -----------------------------------------------
        if op.type == 19:
            try:
                if op.param3 in mid:
                    if op.param2 in kimid:
                        G = ki.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki.updateGroup(G)
                        Ticket = ki.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        cl.updateGroup(G)
                    else:
                        G = ki.getGroup(op.param1)
                        ki.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki.updateGroup(G)
                        Ticket = ki.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        cl.updateGroup(G)
                        ki.updateGroup(G)
                        wait["blacklist"][op.param2] = True

                elif op.param3 in kimid:
                    if op.param2 in ki2mid:
                        G = ki2.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki2.updateGroup(G)
                        Ticket = ki2.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki2.updateGroup(G)
                    else:
                        G = ki2.getGroup(op.param1)

                        ki2.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki2.updateGroup(G)
                        Ticket = ki2.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki.updateGroup(G)


                elif op.param3 in ki3mid:
                    if op.param2 in ki2mid:
                        G = ki2.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki2.updateGroup(G)
                        Ticket = ki2.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki2.updateGroup(G)
                    else:
                        G = cl.getGroup(op.param1)

                        ki2.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki2.updateGroup(G)
                        Ticket = ki2.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki2.updateGroup(G)

                elif op.param3 in ki2mid:
                    if op.param2 in ki3mid:
                        G = ki3.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki3.updateGroup(G)
                        Ticket = ki3.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki3.updateGroup(G)
                    else:
                        G = cl.getGroup(op.param1)

                        ki3.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki3.updateGroup(G)
                        Ticket = ki3.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki3.updateGroup(G)

                elif op.param3 in ki4mid:
                    if op.param2 in ki5mid:
                        G = ki5.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki5.updateGroup(G)
                        Ticket = ki5.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        cl.updateGroup(G)
                    else:
                        G = ki5.getGroup(op.param1)

                        ki5.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki5.updateGroup(G)
                        Ticket = ki5.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki5.updateGroup(G)

                elif op.param3 in ki5mid:
                    if op.param2 in ki4mid:
                        G = ki4.getGroup(op.param1)
                        G.preventJoinByTicket = False
                        ki4.updateGroup(G)
                        Ticket = ki4.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki4.updateGroup(G)
                    else:
                        G = ki4.getGroup(op.param1)

                        ki4.kickoutFromGroup(op.param1, [op.param2])

                        G.preventJoinByTicket = False
                        ki4.updateGroup(G)
                        Ticket = ki4.reissueGroupTicket(op.param1)
                        cl.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki2.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki3.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki4.acceptGroupInvitationByTicket(op.param1, Ticket)
                        ki5.acceptGroupInvitationByTicket(op.param1, Ticket)
                        G.preventJoinByTicket = True
                        ki4.updateGroup(G)
            except:
                pass
        if op.type == 5:
            if wait["autoAdd"] == True:
                if (wait["message"] in ["", " ", "\n", None]):
                    pass
                else:
                    cl.sendText(op.param1, str(wait["message"]))
                    # ------------------------------------------------------------------------------------

                    # ------------------------------------------------------------------------------------
        if op.type == 59:
            print op


    except Exception as error:
        print error


def a2():
    now2 = datetime.now()
    nowT = datetime.strftime(now2, "%M")
    if nowT[14:] in ["10", "20", "30", "40", "50", "00"]:
        return False
    else:
        return True


def nameUpdate():
    while True:
        try:
            # while a2():
            # pass
            if wait["clock"] == True:
                now2 = datetime.now()
                nowT = datetime.strftime(now2, "༺%H:%M༻")
                profile = cl.getProfile()
                profile.displayName = wait["cName"] + nowT
                cl.updateProfile(profile)
            time.sleep(600)
        except:
            pass


thread2 = threading.Thread(target=nameUpdate)
thread2.daemon = True
thread2.start()

while True:
    try:
        Ops = cl.fetchOps(cl.Poll.rev, 5)
    except EOFError:
        raise Exception("It might be wrong revision\n" + str(cl.Poll.rev))

    for Op in Ops:
        if (Op.type != OpType.END_OF_OPERATION):
            cl.Poll.rev = max(cl.Poll.rev, Op.revision)
            bot(Op)
